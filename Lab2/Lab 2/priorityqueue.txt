package priorityqueues;
import java.util.*;

public class Priorityqueues {

    static Random r = new Random();
    static ArrayList<job> jobQueue = new ArrayList<job>();
    
    public static class job implements Runnable, Comparable<job>{
        int runtime;
        double waittime;
        boolean done = false;
        
        public job(){
            runtime= r.nextInt(100);
            jobQueue.add(this);
        }
        public void run(){
            while(true){
                try{
                    Thread.sleep(runtime);
                    break;
                } catch (Exception e){
                    e.printStackTrace();
                }
                break; 
            }
        } 
       public void run(int fixedtime){
           while(true){
               try{
                   if (fixedtime < runtime){
                       Thread.sleep(fixedtime);
                       runtime = runtime - fixedtime;
                       break;
                   }
                   else{
                       Thread.sleep(runtime);
                       done = true;
                       break;
                   }
               } catch(Exception e){
                   e.printStackTrace();
               }
               break;
           }
       }
       @Override
       
       public int compareTo(job j){
           final int before = -1;
           final int equal = 0;
           final int after = 1;
           
           if(j.runtime < runtime) return after;
           else if(j.runtime> runtime) return before;
           else return equal;
           }
       }
    public static class FIFO{
        double totaltime;
        int totalruntime;
        double avgwaittime = 0;
        ArrayList<job> jq = (ArrayList<job>)jobQueue.clone();
        
        FIFO(){
            execute(jq);
        }
        
        public void execute(ArrayList<job> jq){
            Stopwatch tot= new Stopwatch();
            while(!jq.isEmpty()){
                job j = jq.get(0);
                j.run();
                totalruntime += j.runtime;
                jq.remove(j);
                avgwaittime= avgwaittime + tot.elapsedtime();
            }
            totaltime= tot.elapsedtime();
            avgwaittime = avgwaittime / 100;
            System.out.println("FIFO Total Time ="+gettotaltime);
            System.out.println("FIFO Total Run Time (Actual) = "
                    +gettotalruntime);
            System.out.println("FIFO Avverage Wait Time = "
                    +getavgwaittime);
        }
        public double gettotaltime(){
            return this.totaltime;
        }
        public int gettotalruntime(){
            return this.totalruntime;
        }
        public double getavgwaittime(){
            return this.avgwaittime;
        }     
    }
    
    public static class RR{
        double totaltime;
        int totalruntime;
        double avgwaittime;
        int fixedtime;
        ArrayList<job> jq = (ArrayList<job>)jobQueue.clone();
        RR(){
            fixedtime = 20;
            execute(jq);
        }
        public void execute (ArrayList<job> jq){
            Stopwatch tot = new Stopwatch();
            while(!jq.isEmpty()){
                job j = jq.get(0);
                j.run(fixedtime);
                if(!j.done){
                    totalruntime += fixedtime;
                    avgwaittime = avgwaittime + tot.elapsedtime();
                    jq.remove(j);
                    jq.add(j);
                }
                else{
                    totalruntime += j.runtime;
                    avgwaittime = avgwaittime + tot.elapsedtime();
                    jq.remove(j);
                }
            }
            totaltime= tot.elapsedtime();
            avgwaittime = avgwaittime / 100;
            System.out.println("FIFO Total Time ="+gettotaltime);
            System.out.println("FIFO Total Run Time (Actual) = "
                    +gettotalruntime);
            System.out.println("FIFO Avverage Wait Time = "
                    +getavgwaittime);
        }
        public double gettotaltime(){
            return this.totaltime;
        }
        public int gettotalruntime(){
            return this.totalruntime;
        }
        public double getavgwaittime(){
            return this.avgwaittime;
        }                   
    }
    
    public static class MinPQ<Key> implements Iterable<Key> {
        double totaltime;
        int totalruntime;
        double avgwaittime;
        ArrayList<job> jq = (ArrayList<job>)jobQueue.clone();
        MinPQ<job> pQ;
        private Key[] pq;
        private int n;
        private Comparator<Key> comparator;
        
        
        public MinPQ<job> setup(){
            pQ = new MinPQ(100);
            for (job j:jq){
                pQ.insert(j);
            }
            return pQ;
        }
        public void execute (ArrayList<job> jq){
            pQ = setup();
            Stopwatch tot = new Stopwatch();
            while(!jq.isEmpty()){
                job j = pQ.delMin();
                j.run();
                totalruntime += j.runtime;
                avgwaittime = avgwaittime + tot.elapsedtime();

                }
            totaltime= tot.elapsedtime();
            avgwaittime = avgwaittime / 100;
            System.out.println("FIFO Total Time ="+gettotaltime);
            System.out.println("FIFO Total Run Time (Actual) = "
                    +gettotalruntime);
            System.out.println("FIFO Avverage Wait Time = "
                    +getavgwaittime);
        }
        public double gettotaltime(){
            return this.totaltime;
        }
        public int gettotalruntime(){
            return this.totalruntime;
        }
        public double getavgwaittime(){
            return this.avgwaittime;
        }
        public MinPQ(int initCapacity){
            pq = (Key[]) new Object[initCapacity + 1];
            n = 0;
        }
        
        public MinPQ(){
            this(1);
            execute();
        }
        
        public MinPQ(int initCapacity, Comparator<Key> comparator) {
            this.comparator = comparator;
            pq = (Key[]) new Object[initCapacity + 1];
            n = 0;
        }
        public MinPQ(Comparator<Key> comparator) {
            this(1, comparator);
        }
        
        public MinPQ(Key[] keys){
            n = keys.length;
            pq = (Key[]) new Object[keys.length +1];
            for(int i = 0; i < n; i++)
                pq[i+1] = keys[i];
            for( int k = n/2; k>= 1; k--)
                sink(k);
            assert isMinHeap();
        }
        public boolean isEmpty(){
            return n == 0;
        }
        public int size(){
            return n;
        }
        public Key min(){
            if(isEmpty())
                throw new NoSuchElementException
                    ("Priority queue underflow");
            return pq[1];
        }
        private void resize(int capacity) {
            assert capacity > n;
            Key[] temp = (Key[]) new Object[capacity];
            for (int i = 1; i <= n; i++)
                temp [i] = pq[i];
                pq = temp;
        }
        public void insert(Key x){
            if (n == pq.length - 1) resize (2 * pq.length);
            pq[++n] = x;
            swim(n);
            assert isMinheap();
        }
        public Key delMin(){
            if(isEmpty()) 
                throw new NoSuchElementException
                            ("Priority queue underflow");
            exch(1,n);
            Key min = pq[n--];
            sink(1);
            pq[n+1] = null;
            if((n>0) && (n == (pq.length - 1) / 4)) resize (pq.length /2);
            assert isMinHeap();
            return min;
        }
        private void swim(int k){
            while(k > 1 && greater(k/2,k)){
                exch(k,k/2);
                k = k/2;
            }
        }
        private void sink (int k){
            while (2*k <=n){
                int j = 2*k;
                if (j<n && greater(j, j+1)) j++;
                if(!greater(k,j))break;
                exch(k,j);
                k = j;
            }
        }
        private boolean greater (int i, int j) {
            if (comparator == null) {
                return ((Comparable<Key>) pq[i]).compareTo(pq[j]) > 0;
            }
            else{
                return comparator.compare(pq[i],pq[j]) > 0;
            }
        }
        private void exch(int i, int j){
            Key swap = pq[i];
            pq[i] = pq[j];
            pq[j] = swap;
        }
        private boolean isMinHeap(){
            return isMinHeap(1);
        }
        private boolean isMinHeap(int k) {
            if(k > n) return true;
            int left = 2*k, right = 2*k+1;
            if(left <= n && greater(k,left)) return false;
            if(right <= n && greater(k, right)) return false;
            return isMinHeap(left) && isMinHeap(right);
        }
        public Iterator<Key> interator() {
            return new HeapIterator();
        }
        private class HeapIterator implements Iterator<Key> {
            private MinPQ<Key> copy;
            
            public HeapIterator(){
                if(comparator == null) copy = new MinPQ<Key>(size());
                else copy = new MinPQ<Key>(size(),comparator);
                for (int i = 1; i <= n; i++)
                    copy.insert(pq[i]);
            }
            public boolean hasNext(){
                return !copy.isEmpty();
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
            public Key next() {
                if (!hasNext())throw new NoSuchElementException();
                return copy.delMin();
            }
        }
       
    }
    

    public static void main(String[] args) {
        for (int i = 0; i < 100; i++){
            job temp = new job();
            jobQueue.add(temp);
        }
        FIFO fifo = new FIFO();
        RR rr = new RR();
        MinPQ<ArrayList<job>> pq = new MinPQ<ArrayList<job>>();
    }
    
}
/*
FIFO Total Time = 11069.0
FIFO Total Run Time(Actual)= 10994
RR Total Time = 6809.0
RR Total Run Time = 2211.0
FIFO Total Run Time (Actual) = 2034
*/